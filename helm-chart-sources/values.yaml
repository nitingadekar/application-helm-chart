image:
  repository: 1234567890.dkr.ecr.us-east-1.amazonaws.com/application-service-name
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  # tag: "latest"
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000
nodeSelector: {}
tolerations: []
  
affinity: {}

terminationDelay: 15

#################### web configuration 
web: 
enabled: true
replicaCount: 1
resources: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

container: 
  port: 8080  # port no. on which the container is listening
  command: ["/bin/sh"]
  args: ["java -jar application.jar"]
  preStop: 
    httpGet:
      path: /healthcheck
      port: 8080
      host: localhost
      scheme: HTTP
  env: 
  - name: ENV
    value: "qa"
  - name:  APP_CONFIG
    value: "true"

secret:
  enabled: false
secretName: service-name
secrets: []


service:
  type: LoadBalancer
  port: 8080  ## port no. on which other services will make api call. 
  annotations: 
    # service.beta.kubernetes.io/aws-load-balancer-type: external
    # service.beta.kubernetes.io/aws-load-balancer-name: qa{{SERVICE}}-k8s
    # external-dns.alpha.kubernetes.io/hostname: k8s-{{ .Release.Name  }}-internal.example.com
    # service.beta.kubernetes.io/aws-load-balancer-healthcheck-protocol: http
    # service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: traffic-port

#   service.beta.kubernetes.io/aws-load-balancer-nlb-target-type: instance 
#   service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: EnvironmentName=qa,Team={{TEAMNAME}
#    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "3"
#    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "3"
#    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
#    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "10"
#    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-1:1234567890:certificate/cb57bd9c-ecac-4259-8225-537fc205c1fe
#    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: 443
#    service.beta.kubernetes.io/aws-load-balancer-scheme: internal
#    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
#    service.beta.kubernetes.io/load-balancer-source-ranges: 10.0.0.0/16 


livenessProbe: 
  httpGet:
    path: /healthcheck/
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5
readinessProbe:
  httpGet:
    path: /healthcheck/
    port: http
  initialDelaySeconds: 60
  periodSeconds: 5


ingress:
  enabled: false   ### Set "web.service.type: NodePort" before enableing ingress 
  className: "alb"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: 
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

  